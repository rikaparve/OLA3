###### Updated Priciple Component Analysis
model_pca <- lm(optimal_indicator$vaekst ~ optimal_indicator$weighted_ind)
summary(model_pca)
pcr_coef <- c(coefficients(model_pca)[2]*loadings_DTS_PCR[,1])
pre <- as.data.frame(matrix(nrow=1, ncol=12))
pre[1,] <- ftillid_K_period[98,3:14]
sum(data.frame(coefficients(model_pca)[1], pcr_coef*pre))
pred_pcr <- predict(DST_PCR, pre, ncomp=1)
pred_pcr
weights
model_pca <- lm(optimal_indicator$vaekst ~ optimal_indicator$weighted_ind)
summary(model_pca)
pcr_coef <- c(coefficients(model_pca)[2]*loadings_DTS_PCR[,1])
pre <- as.data.frame(matrix(nrow=1, ncol=12))
pre[1,] <- ftillid_K_period[98,3:14]
sum(data.frame(coefficients(model_pca)[1], pcr_coef*pre))
pred_pcr <- predict(DST_PCR, pre, ncomp=1)
pred_pcr
pred_pcr
View(optimal_indicator)
View(optimal_indicator)
pre[1,] <- ftillid_K_period[99,3:14]
pred_pcr <- predict(DST_PCR, pre, ncomp=1)
pred_pcr
###### Updated Priciple Component Analysis
model_pca <- lm(optimal_indicator$vaekst ~ optimal_indicator$weighted_ind)
summary(model_pca)
pcr_coef <- c(coefficients(model_pca)[2]*loadings_DTS_PCR[,1])
pre <- as.data.frame(matrix(nrow=1, ncol=12))
pre[1,] <- ftillid_K_period[99,3:14]
sum(data.frame(coefficients(model_pca)[1], pcr_coef*pre))
pred_pcr <- predict(DST_PCR, pre, ncomp=1)
pred_pcr
View(ftillid_K_period)
pre[1,] <- ftillid_wide[346:347,3:14]
Q4 <- c(ftillid_wide$Q1_Fam_nu[346:347],
ftillid_wide$Q2_Fam_etår[346:347],
ftillid_wide$Q3_Dan_nu[346:347],
ftillid_wide$Q4_Dan_etår[346:347],
ftillid_wide$Q5_Forbrugsgoder_nu[346:347],
ftillid_wide$Q6_Priser_nu[346:347],
ftillid_wide$Q7_Priser_etår[346:347],
ftillid_wide$Q8_Arbejdsløshed[346:347],
ftillid_wide$Q9_Forbrugsgoder_etår[346:347],
ftillid_wide$Q10_Sparop_nu[346:347],
ftillid_wide$Q11_Sparop_etår[346:347],
ftillid_wide$Q12_Famøk_nu[346:347])
weighted_ind <- as.data.frame(matrix(ncol=12, nrow=1))
weighted_ind[1,] <- QQ4
weighted_ind[1,] <- Q4
mean(c(ftillid_wide$Q12_Famøk_nu[346:347])))
weighted_ind <- as.data.frame(matrix(ncol=12, nrow=1))
weighted_ind[1,] <- Q4
Q4 <- c(mean(c(ftillid_wide$Q1_Fam_nu[346:347])),
mean(c(ftillid_wide$Q2_Fam_etår[346:347])),
mean(c(ftillid_wide$Q3_Dan_nu[346:347])),
mean(c(ftillid_wide$Q4_Dan_etår[346:347])),
mean(c(ftillid_wide$Q5_Forbrugsgoder_nu[346:347])),
mean(c(ftillid_wide$Q6_Priser_nu[346:347])),
mean(c(ftillid_wide$Q7_Priser_etår[346:347])),
mean(c(ftillid_wide$Q8_Arbejdsløshed[346:347])),
mean(c(ftillid_wide$Q9_Forbrugsgoder_etår[346:347])),
mean(c(ftillid_wide$Q10_Sparop_nu[346:347])),
mean(c(ftillid_wide$Q11_Sparop_etår[346:347])),
mean(c(ftillid_wide$Q12_Famøk_nu[346:347])))
weighted_ind <- as.data.frame(matrix(ncol=12, nrow=1))
weighted_ind[1,] <- Q4
colnames(weighted_ind) <- c("Q1_Fam_nu", "Q2_Fam_etår", "Q3_Dan_nu", "Q4_Dan_etår",
"Q5_Forbrugsgoder_nu", "Q6_Priser_nu", "Q7_Priser_etår",
"Q8_Arbejdsløshed", "Q9_Forbrugsgoder_etår", "Q10_Sparop_nu",
"Q11_Sparop_etår", "Q12_Famøk_nu")
# Subset `weighted_ind` to have only these predictors
pred_weighted_2 <- predict(DST_PCR, newdata = weighted_ind, ncomp=1)
print(pred_weighted_2)
mean(Q4)
sum(Q4*loadings_DTS_PCR)
Q4*loadings_DTS_PCR
sum(Q4*loadings_DTS_PCR[1:12])
value2015 <- sum(forbrug_period[61:64,2])
value2016 <- sum(forbrug_period[65:68,2])
realvaekst_2016 <- (value2016-value2015)/value2015*100
realvaekst_2016
diff <- (realvaekst_2016-2)/2*100
diff
#### Make a new dataframe
DST_ind <- data.frame(TID=ftillid_K_period$TID,
DST_FTI=ftillid_K_period$DST_FTI,
Vaekst=forbrug_period$Vaekst)
str(DST_ind)
# Add a new column with up or down
DST_ind$Op_ned <- ifelse(DST_ind$Vaekst >= 0, 1, 0)
freq_opned <- data.frame(table(DST_ind$Op_ned))
# Run the logistic model
DST_ind$Op_ned <- as.factor(DST_ind$Op_ned)
logistic_model <- glm(Op_ned ~ DST_FTI, data=DST_ind, family="binomial")
summary(logistic_model)
View(freq_opned)
summary(logistic_model)
# Make a prediction
newdata <- data.frame(DST_FTI=c(meanc(ftillid_wide[346:347,2])))
# Make a prediction
newdata <- data.frame(DST_FTI=c(mean(c(ftillid_wide[346:347,2]))))
prediction <- predict(logistic_model, newdata=newdata, type="response")
prediction
predict_DST
# Make a column with predictions
predict_DST <- data.frame(DST_FTI=DST_ind$DST_FTI)
predictions_jul <- predict(logistic_model, predict_DST, type="response")
# Lav en vector for sandsynligheder
prediction_jul <- c()
# Loop  for fortolkning af sandsynligheder
for (i in 1:length(predictions_jul)) {
# Check if the current value is NA
if (is.na(predictions_jul[i])) {
prediction_jul[i] <- "unknown"  # Or some other label for missing values
} else if (predictions_jul[i] > 0.7958) {
prediction_jul[i] <- "1"
} else {
prediction_jul[i] <- "0"
}
}
DST_ind$Prediction <- as.factor(prediction_jul)
View(DST_ind)
library(caret)
# Lav en vector for sandsynligheder
prediction_jul <- c()
# Loop  for fortolkning af sandsynligheder
for (i in 1:length(predictions_jul)) {
# Check if the current value is NA
if (is.na(predictions_jul[i])) {
prediction_jul[i] <- "unknown"  # Or some other label for missing values
} else if (predictions_jul[i] > 0.5) {
prediction_jul[i] <- "1"
} else {
prediction_jul[i] <- "0"
}
}
DST_ind$Prediction <- as.factor(prediction_jul)
confusion_matrix_50 <- confusionMatrix(DST_ind$Prediction, DST_ind$Op_ned)
confusion_matrix_50 <- confusionMatrix(DST_ind$Prediction, DST_ind$Op_ned)
print(confusion_matrix_50)
### Make a ROC curve
library(pROC)
DST_ind$Prediction <- as.numeric(DST_ind$Prediction)
DST_ind$Op_ned <- as.numeric(DST_ind$Op_ned)
# Lav en vector for sandsynligheder
prediction_jul <- c()
# Loop  for fortolkning af sandsynligheder
for (i in 1:length(predictions_jul)) {
# Check if the current value is NA
if (is.na(predictions_jul[i])) {
prediction_jul[i] <- "unknown"  # Or some other label for missing values
} else if (predictions_jul[i] > 0.79) {
prediction_jul[i] <- "1"
} else {
prediction_jul[i] <- "0"
}
}
DST_ind$Prediction <- as.factor(prediction_jul)
confusion_matrix_79 <- confusionMatrix(DST_ind$Prediction, DST_ind$Op_ned)
DST_ind$Prediction <- as.numeric(DST_ind$Prediction)
DST_ind$Op_ned <- as.numeric(DST_ind$Op_ned)
roc_79 <- roc(data=DST_ind, response=Op_ned, predictor=Prediction)
plot(roc_79, col="blue", main="ROC kurve")
View(DST_ind)
roc_79 <- roc(data=DST_ind, response=Op_ned, predictor=Prediction)
plot(roc_79, col="blue", main="ROC kurve")
library(caret)
#### Make a new dataframe
DST_ind <- data.frame(TID=ftillid_K_period$TID,
DST_FTI=ftillid_K_period$DST_FTI,
Vaekst=forbrug_period$Vaekst)
str(DST_ind)
# Add a new column with up or down
DST_ind$Op_ned <- ifelse(DST_ind$Vaekst >= 0, 1, 0)
freq_opned <- data.frame(table(DST_ind$Op_ned))
# Run the logistic model
DST_ind$Op_ned <- as.factor(DST_ind$Op_ned)
logistic_model <- glm(Op_ned ~ DST_FTI, data=DST_ind, family="binomial")
summary(logistic_model)
# Make a prediction
newdata <- data.frame(DST_FTI=c(mean(c(ftillid_wide[346:347,2]))))
prediction <- predict(logistic_model, newdata=newdata, type="response")
prediction
if (prediction[2] > 0.6) {
prediction_Q4 <- "op"
} else {
prediction_Q4 <- "ned"
}
library(caret)
#### Make a new dataframe
DST_ind <- data.frame(TID=ftillid_K_period$TID,
DST_FTI=ftillid_K_period$DST_FTI,
Vaekst=forbrug_period$Vaekst)
str(DST_ind)
# Add a new column with up or down
DST_ind$Op_ned <- ifelse(DST_ind$Vaekst >= 0, 1, 0)
freq_opned <- data.frame(table(DST_ind$Op_ned))
# Run the logistic model
DST_ind$Op_ned <- as.factor(DST_ind$Op_ned)
logistic_model <- glm(Op_ned ~ DST_FTI, data=DST_ind, family="binomial")
summary(logistic_model)
# Make a prediction
newdata <- data.frame(DST_FTI=c(mean(c(ftillid_wide[346:347,2]))))
prediction <- predict(logistic_model, newdata=newdata, type="response")
prediction
if (prediction > 0.6) {
prediction_Q4 <- "op"
} else {
prediction_Q4 <- "ned"
}
print(prediction_Q4)
# Make a column with predictions
predict_DST <- data.frame(DST_FTI=DST_ind$DST_FTI)
predictions_jul <- predict(logistic_model, predict_DST, type="response")
# Lav en vector for sandsynligheder
prediction_jul <- c()
# Loop  for fortolkning af sandsynligheder
for (i in 1:length(predictions_jul)) {
# Check if the current value is NA
if (is.na(predictions_jul[i])) {
prediction_jul[i] <- "unknown"  # Or some other label for missing values
} else if (predictions_jul[i] > 0.79) {
prediction_jul[i] <- "1"
} else {
prediction_jul[i] <- "0"
}
}
DST_ind$Prediction <- as.factor(prediction_jul)
confusion_matrix_79 <- confusionMatrix(DST_ind$Prediction, DST_ind$Op_ned)
### Make a ROC curve
library(pROC)
library(caret)
#### Make a new dataframe
DST_ind <- data.frame(TID=ftillid_K_period$TID,
DST_FTI=ftillid_K_period$DST_FTI,
Vaekst=forbrug_period$Vaekst)
str(DST_ind)
# Add a new column with up or down
DST_ind$Op_ned <- ifelse(DST_ind$Vaekst >= 0, 1, 0)
freq_opned <- data.frame(table(DST_ind$Op_ned))
# Run the logistic model
DST_ind$Op_ned <- as.factor(DST_ind$Op_ned)
logistic_model <- glm(Op_ned ~ DST_FTI, data=DST_ind, family="binomial")
summary(logistic_model)
# Make a prediction
newdata <- data.frame(DST_FTI=c(mean(c(ftillid_wide[346:347,2]))))
prediction <- predict(logistic_model, newdata=newdata, type="response")
prediction
if (prediction > 0.6) {
prediction_Q4 <- "op"
} else {
prediction_Q4 <- "ned"
}
print(prediction_Q4)
# Make a column with predictions
predict_DST <- data.frame(DST_FTI=DST_ind$DST_FTI)
predictions_jul <- predict(logistic_model, predict_DST, type="response")
# Lav en vector for sandsynligheder
prediction_jul <- c()
# Loop  for fortolkning af sandsynligheder
for (i in 1:length(predictions_jul)) {
# Check if the current value is NA
if (is.na(predictions_jul[i])) {
prediction_jul[i] <- "unknown"  # Or some other label for missing values
} else if (predictions_jul[i] > 0.79) {
prediction_jul[i] <- "1"
} else {
prediction_jul[i] <- "0"
}
}
DST_ind$Prediction <- as.numeric(DST_ind$Prediction)
View(DST_ind)
DST_ind$Prediction <- as.factor(prediction_jul)
View(DST_ind)
DST_ind$Prediction <- as.numeric(DST_ind$Prediction)
DST_ind$Op_ned <- as.numeric(DST_ind$Op_ned)
roc_79 <- roc(data=DST_ind, response=Op_ned, predictor=Prediction)
plot(roc_79, col="blue", main="ROC kurve")
# Lav en vector for sandsynligheder
prediction_jul <- c()
# Loop  for fortolkning af sandsynligheder
for (i in 1:length(predictions_jul)) {
# Check if the current value is NA
if (is.na(predictions_jul[i])) {
prediction_jul[i] <- "unknown"  # Or some other label for missing values
} else if (predictions_jul[i] > 0.795) {
prediction_jul[i] <- "1"
} else {
prediction_jul[i] <- "0"
}
}
DST_ind$Prediction <- as.factor(prediction_jul)
confusion_matrix_79 <- confusionMatrix(DST_ind$Prediction, DST_ind$Op_ned)
print(confusion_matrix_79)
# What data do I need to use?
comb_df2 <- as.data.frame(comb_df)
forbrug_period2 <- forbrug_period
r_squared_df <- list()
# Repeat the process until only one row is left
while (nrow(comb_df2) > 63) {
# Initialize a vector to store R² values for the current iteration
opt_r_squared_values <- numeric(ncol(comb_df2))
# Loop through each column in the data frame
for (i in 1:ncol(comb_df2)) {
# Create a linear model with Vaekst as the dependent variable and each column as an independent variable
opt_model <- lm(forbrug_period2$Vaekst ~ comb_df2[, i])
# Store the R² value in the vector at index i
opt_r_squared_values[i] <- summary(opt_model)$r.squared
}
# Add the vector of R² values to the r_squared_df list for this iteration
r_squared_df[[length(r_squared_df) + 1]] <- opt_r_squared_values
# Remove the last row from both data frames for the next iteration
comb_df2 <- comb_df2[-nrow(comb_df2), ]
forbrug_period2 <- forbrug_period2[-nrow(forbrug_period2), ]
}
r_squared_df <- as.data.frame(r_squared_df)
#Create a vector of new column names
num_columns <- ncol(r_squared_df)
new_column_names <- paste0("forklaringsgrad", seq(from = 98, by = -1, length.out = num_columns))
colnames(r_squared_df) <- new_column_names
row.names(r_squared_df) <- comb_names
###### DOUBLECHECK
r_squared_df2 <- list()
# Gendan dataframerne
comb_df2 <- as.data.frame(comb_df)
forbrug_period2 <- forbrug_period
comb_df2 <- comb_df2[-c(91:nrow(comb_df2)), ]
forbrug_period2 <- forbrug_period2[-c(91:nrow(forbrug_period2)), ]
for(i in 1:ncol(comb_df2)) {
model <- lm(forbrug_period2$Vaekst ~ comb_df2[,i])
r_squared_values[i] <- summary(model)$r.squared
}
test = ifelse(r_squared_values == r_squared_df$forklaringsgrad90, T, F)
sum(test)
# What data do I need to use?
comb_df2 <- as.data.frame(comb_df)
forbrug_period2 <- forbrug_period
r_squared_df <- list()
# Repeat the process until only one row is left
while (nrow(comb_df2) > 63) {
# Initialize a vector to store R² values for the current iteration
opt_r_squared_values <- numeric(ncol(comb_df2))
# Loop through each column in the data frame
for (i in 1:ncol(comb_df2)) {
# Create a linear model with Vaekst as the dependent variable and each column as an independent variable
opt_model <- lm(forbrug_period2$Vaekst ~ comb_df2[, i])
# Store the R² value in the vector at index i
opt_r_squared_values[i] <- summary(opt_model)$r.squared
}
# Add the vector of R² values to the r_squared_df list for this iteration
r_squared_df[[length(r_squared_df) + 1]] <- opt_r_squared_values
# Remove the last row from both data frames for the next iteration
comb_df2 <- comb_df2[-nrow(comb_df2), ]
forbrug_period2 <- forbrug_period2[-nrow(forbrug_period2), ]
}
r_squared_df <- as.data.frame(r_squared_df)
View(r_squared_df)
#Create a vector of new column names
num_columns <- ncol(r_squared_df)
new_column_names <- paste0("forklaringsgrad", seq(from = 98, by = -1, length.out = num_columns))
colnames(r_squared_df) <- new_column_names
row.names(r_squared_df) <- comb_names
View(r_squared_df)
#Create a vector of new column names
num_columns <- ncol(r_squared_df)
new_column_names <- paste0("forklaringsgrad", seq(from = 99, by = -1, length.out = num_columns))
colnames(r_squared_df) <- new_column_names
row.names(r_squared_df) <- comb_names
View(r_squared_df)
###### DOUBLECHECK
r_squared_df2 <- list()
# Gendan dataframerne
comb_df2 <- as.data.frame(comb_df)
forbrug_period2 <- forbrug_period
comb_df2 <- comb_df2[-c(91:nrow(comb_df2)), ]
forbrug_period2 <- forbrug_period2[-c(91:nrow(forbrug_period2)), ]
for(i in 1:ncol(comb_df2)) {
model <- lm(forbrug_period2$Vaekst ~ comb_df2[,i])
r_squared_values[i] <- summary(model)$r.squared
}
test = ifelse(r_squared_values == r_squared_df$forklaringsgrad90, T, F)
sum(test)
# Calculate the averages
r_squared_df$GNS <- NULL
r_squared_df$GNS <- rowMeans(r_squared_df)
View(r_squared_df)
r_squared_df$StD <- apply(r_squared_df[, 1:35], 1, sd)
View(r_squared_df)
unique <- unique(r_squared_df$StD) # check everything is OK
unique
View(r_squared_df)
# Make a new dataframe with the new values
optimal_r_squared <- r_squared_df[,c(37:38)]
optimal_r_squared$index <- optimal_r_squared$GNS/optimal_r_squared$StD
# Add rankings for each existing column
library(tidyverse)
optimal_r_squared <- arrange(optimal_r_squared, desc(GNS))
View(optimal_r_squared)
optimal_r_squared$GNS_ranking <- c(1:4095)
View(optimal_r_squared)
optimal_r_squared <- arrange(optimal_r_squared, StD)
optimal_r_squared$StD_ranking <- c(1:4095)
View(optimal_r_squared)
optimal_r_squared <- arrange(optimal_r_squared, desc(index))
optimal_r_squared$index_ranking <- c(1:4095)
View(optimal_indicator)
which(row.names(optimal_r_squared) == "Q3_Dan_nu, Q9_Forbrugsgoder_etår, Q11_Sparop_etår, Q12_Famøk_nu")
print(optimal_r_squared[54,1:3])
print(optimal_r_squared[159,1:3])
print(row.names(optimal_r_squared)[1:7])
stab_ind_all <- c("Q3_Dan_nu, Q5_Forbrugsgoder_nu, Q9_Forbrugsgoder_etår, Q11_Sparop_etår, Q12_Famøk_nu",
"Q2_Fam_etår, Q3_Dan_nu, Q5_Forbrugsgoder_nu, Q9_Forbrugsgoder_etår, Q11_Sparop_etår, Q12_Famøk_nu",
"Q2_Fam_etår, Q3_Dan_nu, Q5_Forbrugsgoder_nu, Q7_Priser_etår, Q9_Forbrugsgoder_etår, Q10_Sparop_nu, Q11_Sparop_etår, Q12_Famøk_nu",
"Q3_Dan_nu, Q7_Priser_etår, Q9_Forbrugsgoder_etår, Q10_Sparop_nu, Q11_Sparop_etår",
"Q1_Fam_nu, Q2_Fam_etår, Q3_Dan_nu, Q4_Dan_etår, Q5_Forbrugsgoder_nu, Q7_Priser_etår, Q9_Forbrugsgoder_etår, Q10_Sparop_nu, Q11_Sparop_etår, Q12_Famøk_nu",
"Q1_Fam_nu, Q2_Fam_etår, Q3_Dan_nu, Q5_Forbrugsgoder_nu, Q7_Priser_etår, Q8_Arbejdsløshed, Q9_Forbrugsgoder_etår, Q10_Sparop_nu, Q11_Sparop_etår",
"Q3_Dan_nu, Q5_Forbrugsgoder_nu, Q7_Priser_etår, Q9_Forbrugsgoder_etår, Q10_Sparop_nu, Q11_Sparop_etår")
stab_ind_all_indeces <- which(comb_names %in% stab_ind_all)
stab_ind <- as.data.frame(comb_df[,stab_ind_all_indeces])
stab_ind$vaekst <- forbrug_period$Vaekst
stab_column_names <- paste0("Stability_ind", seq(from = 1, by = 1, length.out = 7))
colnames(stab_ind) <- c(stab_column_names, "vaekst")
# Prediction indicator values
prediction_stab_ind <- data.frame(matrix(data=NA, nrow=2, ncol=7))
colnames(prediction_stab_ind) <- stab_column_names  # Assuming stab_column_names is defined
# What data do I need to use?
comb_df3 <- as.data.frame(comb_df)
forbrug_period3 <- forbrug_period
r_squared_df2 <- list()
# What data do I need to use?
comb_df3 <- as.data.frame(comb_df)
View(comb_df3)
View(comb_df3)
View(comb_df2)
comb_df3 <- comb_df3[order(rownames(comb_df3), decreasing = TRUE),]
View(comb_df3)
comb_df3 <- comb_df3[order(as.numeric(rownames(comb_df3)), decreasing = TRUE),]
View(comb_df3)
# What data do I need to use?
comb_df3 <- as.data.frame(comb_df)
comb_df3 <- comb_df3[order(as.numeric(rownames(comb_df3)), decreasing = TRUE),]
View(comb_df3)
forbrug_period3 <- forbrug_period
forbrug_period3 <- forbrug_period3[order(as.numeric(rownames(forbrug_period3)), decreasing = TRUE),]
View(forbrug_period3)
# What data do I need to use?
comb_df3 <- as.data.frame(comb_df)
comb_df3 <- comb_df3[order(as.numeric(rownames(comb_df3)), decreasing = TRUE),]
forbrug_period3 <- forbrug_period
forbrug_period3 <- forbrug_period3[order(as.numeric(rownames(forbrug_period3)), decreasing = TRUE),]
#### Stability test
# Initialize a list to store R² values for each iteration
r_squared_df2 <- NULL
r_squared_df2 <- list()
# Repeat the process until only one row is left
while (nrow(comb_df3) > 63) {
# Initialize a vector to store R² values for the current iteration
opt_r_squared_values2 <- numeric(ncol(comb_df3))
# Loop through each column in the data frame
for (i in 1:ncol(comb_df3)) {
# Create a linear model with Vaekst as the dependent variable and each column as an independent variable
opt_model2 <- lm(forbrug_period3$Vaekst ~ comb_df3[, i])
# Store the R² value in the vector at index i
opt_r_squared_values2[i] <- summary(opt_model2)$r.squared
}
# Add the vector of R² values to the r_squared_df2 list for this iteration
r_squared_df2[[length(r_squared_df2) + 1]] <- opt_r_squared_values2
# Remove the last row from both data frames for the next iteration
comb_df3 <- comb_df3[-nrow(comb_df3), ]
forbrug_period3 <- forbrug_period3[-nrow(forbrug_period3), ]
}
r_squared_df2 <- as.data.frame(r_squared_df2)
#Create a vector of new column names
num_columns2 <- ncol(r_squared_df2)
new_column_names2 <- paste0("forklaringsgrad", seq(from = 99, by = -1, length.out = num_columns))
colnames(r_squared_df2) <- new_column_names2
row.names(r_squared_df2) <- comb_names
# Calculate the averages
r_squared_df2$GNS <- NULL
r_squared_df2$GNS <- rowMeans(r_squared_df2)
# Calculate standard deviation
r_squared_df2$StD <- NULL
r_squared_df2$StD <- apply(r_squared_df2[, 1:35], 1, sd)
unique <- unique(r_squared_df2$StD) # check everything is OK
# Make a new dataframe with the new values
optimal_r_squared2 <- r_squared_df2[,c(37:38)]
# Add index value
optimal_r_squared2$index <- NULL
optimal_r_squared2$index <- optimal_r_squared2$GNS/optimal_r_squared2$StD
# Add rankings for each existing column
library(tidyverse)
optimal_r_squared2 <- arrange(optimal_r_squared2, desc(GNS))
optimal_r_squared2$GNS_ranking <- c(1:4095)
optimal_r_squared2 <- arrange(optimal_r_squared2, StD)
optimal_r_squared2$StD_ranking <- c(1:4095)
optimal_r_squared2 <- arrange(optimal_r_squared2, desc(index))
optimal_r_squared2$index_ranking <- c(1:4095)
View(optimal_r_squared2)
which(row.names(optimal_r_squared2) == "Q3_Dan_nu, Q9_Forbrugsgoder_etår, Q11_Sparop_etår, Q12_Famøk_nu")
print(optimal_r_squared2[1841,1:3])
print(optimal_r_squared2[1841,1:6])
loadings_DTS_PCR
loadings_DTS_PCR[1:12]
View(forbrug_meta)
View(forbrug_period2)
View(forbrug_period)
##### Historic average of realvæksten
mean(forbrug_period$Vaekst)
View(optimal_r_squared2)
View(optimal_r_squared2)
View(optimal_r_squared)
